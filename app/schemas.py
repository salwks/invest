"""
Data schemas for the automated trading system.
All models use Pydantic for validation and serialization.
"""

from datetime import datetime, timezone
from typing import Literal, Optional, Any, Dict
from pydantic import BaseModel, Field, validator, ConfigDict
from enum import Enum


def utc_now() -> datetime:
    """Get current UTC time (timezone-aware)."""
    return datetime.now(timezone.utc)


class SessionType(str, Enum):
    """Trading session types"""
    PRE = "pre"
    REGULAR = "regular"
    AFTER = "after"


class EventCategory(str, Enum):
    """News event categories"""
    EARNINGS = "earnings"
    FDA = "FDA"
    MA = "M&A"
    GUIDANCE = "guidance"
    PARTNERSHIP = "partnership"
    REGULATORY = "regulatory"
    RUMOR = "rumor"
    OTHER = "other"


class ActionType(str, Enum):
    """Trading action types"""
    ENTRY = "ENTRY"
    SKIP = "SKIP"


class OrderStatus(str, Enum):
    """Order execution statuses"""
    PENDING = "pending"
    SUBMITTED = "submitted"
    FILLED = "filled"
    PARTIAL = "partial"
    CANCELLED = "cancelled"
    REJECTED = "rejected"
    FAILED = "failed"


class EventCard(BaseModel):
    """
    Structured representation of a news event.
    Populated by LLM interpreter from raw RSS feed data.
    """
    event_id: str = Field(..., description="Unique event identifier (hash)")
    tickers: list[str] = Field(..., description="Related ticker symbols")
    headline: str = Field(..., description="News headline")
    published_at: datetime = Field(..., description="Publication timestamp (UTC)")
    category: EventCategory = Field(..., description="Event category")
    sentiment: float = Field(..., ge=-1.0, le=1.0, description="Sentiment score (-1 to 1)")
    reliability: float = Field(..., ge=0.0, le=1.0, description="Reliability/confidence score")
    key_facts: list[str] = Field(default_factory=list, description="Key extracted facts")
    session: SessionType = Field(..., description="Market session when event occurred")
    cluster_id: str = Field(..., description="Cluster ID for deduplication")
    source: str = Field(default="", description="RSS feed source")
    url: Optional[str] = Field(default=None, description="Source URL")

    model_config = ConfigDict(use_enum_values=True)


class MarketState(BaseModel):
    """
    Current market state for a ticker.
    Calculated from recent price/volume data.
    """
    ticker: str = Field(..., description="Ticker symbol")
    ts: datetime = Field(..., description="Timestamp (UTC)")
    mid: float = Field(..., gt=0, description="Mid price")
    spread_bp: int = Field(..., ge=0, description="Bid-ask spread (basis points)")
    dP_1m: float = Field(..., description="1-minute price change (%)")
    dP_5m: float = Field(..., description="5-minute price change (%)")
    vol_ratio_1m: float = Field(..., ge=0, description="1-minute volume ratio vs average")
    rsi_3: float = Field(..., ge=0, le=100, description="3-period RSI")
    vwap_dev_bp: int = Field(..., description="VWAP deviation (basis points)")
    session: SessionType = Field(..., description="Current market session")
    bid: Optional[float] = Field(default=None, description="Current bid price")
    ask: Optional[float] = Field(default=None, description="Current ask price")
    volume: Optional[int] = Field(default=None, description="Recent volume")

    model_config = ConfigDict(use_enum_values=True)


class PreSignal(BaseModel):
    """
    Initial signal generated by rule engine before risk management.
    """
    action: ActionType = Field(..., description="Recommended action")
    window_hint: str = Field(..., description="Time window hint (e.g., '[1,5]m')")
    metrics: dict = Field(default_factory=dict, description="Relevant metrics used in decision")
    reasons: list[str] = Field(..., description="Human-readable reasons for decision")
    event_id: str = Field(..., description="Related event ID")
    ticker: str = Field(..., description="Ticker symbol")
    timestamp: datetime = Field(default_factory=utc_now, description="Signal generation time (UTC)")

    model_config = ConfigDict(use_enum_values=True, arbitrary_types_allowed=True)


class ApprovedSignal(BaseModel):
    """
    Final approved signal after risk management and position sizing.
    """
    approved: bool = Field(..., description="Whether trade is approved")
    size_final_usd: float = Field(..., ge=0, description="Final position size (USD)")
    hard_stop_bp: int = Field(..., gt=0, description="Hard stop-loss (basis points)")
    take_profit_bp: int = Field(..., gt=0, description="Take profit target (basis points)")
    max_slippage_bp: int = Field(..., ge=0, description="Maximum acceptable slippage (bp)")
    notes: list[str] = Field(default_factory=list, description="Risk management notes")
    ticker: str = Field(..., description="Ticker symbol")
    entry_price_target: Optional[float] = Field(default=None, description="Target entry price")
    shares: Optional[int] = Field(default=None, description="Number of shares to trade")
    timestamp: datetime = Field(default_factory=utc_now, description="Approval timestamp (UTC)")


class OrderRecord(BaseModel):
    """
    Record of an order submitted to the broker.
    """
    order_id: str = Field(..., description="Broker order ID")
    ticker: str = Field(..., description="Ticker symbol")
    event_id: str = Field(..., description="Related event ID")
    signal_id: str = Field(..., description="Related signal ID")
    side: Literal["buy", "sell"] = Field(..., description="Order side")
    quantity: int = Field(..., gt=0, description="Order quantity")
    order_type: Literal["limit", "market", "stop", "stop_limit"] = Field(..., description="Order type")
    limit_price: Optional[float] = Field(default=None, description="Limit price")
    stop_price: Optional[float] = Field(default=None, description="Stop price")
    status: OrderStatus = Field(..., description="Current order status")
    submitted_at: datetime = Field(..., description="Submission timestamp (UTC)")
    filled_at: Optional[datetime] = Field(default=None, description="Fill timestamp (UTC)")
    filled_avg_price: Optional[float] = Field(default=None, description="Average fill price")
    filled_qty: Optional[int] = Field(default=None, description="Filled quantity")
    error_message: Optional[str] = Field(default=None, description="Error message if failed")

    model_config = ConfigDict(use_enum_values=True)


class Position(BaseModel):
    """
    Current open position.
    """
    ticker: str = Field(..., description="Ticker symbol")
    entry_price: float = Field(..., gt=0, description="Entry price")
    quantity: int = Field(..., description="Position quantity (+ for long, - for short)")
    entry_time: datetime = Field(..., description="Entry timestamp (UTC)")
    event_id: str = Field(..., description="Related event ID")
    order_id: str = Field(..., description="Entry order ID")
    stop_loss: float = Field(..., gt=0, description="Stop-loss price")
    take_profit: float = Field(..., gt=0, description="Take-profit price")
    unrealized_pnl: Optional[float] = Field(default=None, description="Unrealized P&L")
    current_price: Optional[float] = Field(default=None, description="Current market price (peak)")
    partial_sold: bool = Field(default=False, description="Whether partial profit taking has occurred")


class RunRecord(BaseModel):
    """
    Record of a single automation cycle run.
    """
    run_id: str = Field(..., description="Unique run identifier")
    started_at: datetime = Field(..., description="Run start time (UTC)")
    completed_at: Optional[datetime] = Field(default=None, description="Run completion time (UTC)")
    status: Literal["running", "completed", "failed"] = Field(..., description="Run status")
    events_fetched: int = Field(default=0, description="Number of events fetched")
    signals_generated: int = Field(default=0, description="Number of signals generated")
    orders_placed: int = Field(default=0, description="Number of orders placed")
    errors: list[str] = Field(default_factory=list, description="Errors encountered")
    mode: str = Field(..., description="Run mode (DRYRUN/SEMI_AUTO/FULL_AUTO)")


class RSSFeedItem(BaseModel):
    """
    Raw RSS feed item before LLM processing.
    """
    source: str = Field(..., description="Feed source")
    headline: str = Field(..., description="Article headline")
    url: str = Field(..., description="Article URL")
    published_at: datetime = Field(..., description="Publication time (UTC)")
    snippet: Optional[str] = Field(default=None, description="Article snippet/summary")
    cluster_id: str = Field(..., description="Deduplication cluster ID")


class PortfolioState(BaseModel):
    """
    Current portfolio state for risk management.
    """
    equity: float = Field(..., gt=0, description="Current equity")
    cash: float = Field(..., description="Available cash")
    positions_count: int = Field(..., ge=0, description="Number of open positions")
    daily_pnl: float = Field(..., description="Today's realized + unrealized P&L")
    daily_pnl_pct: float = Field(..., description="Today's P&L as % of starting equity")
    sector_exposure: dict[str, float] = Field(default_factory=dict, description="Exposure by sector")
    open_positions: list[Position] = Field(default_factory=list, description="Currently open positions")
    timestamp: datetime = Field(default_factory=utc_now, description="State timestamp (UTC)")
